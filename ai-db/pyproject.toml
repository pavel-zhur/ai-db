[tool.poetry]
name = "ai-db"
version = "0.1.0"
description = "An AI-native database engine that interprets natural language queries"
authors = ["AI-DB Team"]
readme = "README.md"
packages = [{include = "ai_db", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.13,<3.14"
ai-shared = {path = "../ai-shared", develop = true}
pyyaml = "^6.0"
jsonschema = "^4.20.0"
langchain = "^0.3.0"
langchain-openai = "^0.2.0"
dependency-injector = "^4.41.0"
aiofiles = "^24.1.0"
RestrictedPython = "^8.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4"
pytest-asyncio = "^0.24"
pytest-cov = "^6.0"
mypy = "^1.16"
black = "^25.1"
ruff = "^0.12"
types-pyyaml = "^6.0.12"
types-aiofiles = "^23.2.0"
types-jsonschema = "^4.0"

[tool.mypy]
strict = true
python_version = "3.13"
exclude = ["tests/"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "RestrictedPython.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "S", "A", "C", "DTZ", "T", "W", "RUF"]
ignore = [
    "S101",   # Allow assert in tests
    "S102",   # Allow exec() - required for database query execution
    "S301",   # Allow pickle - required for query plan serialization  
    "S302",   # Allow marshal - required for RestrictedPython bytecode
    "S307",   # Allow eval() - required for constraint evaluation in sandbox
    "C901",   # Allow complex functions - acceptable for database engine
    "A001",   # Allow PermissionError shadowing - custom exception is intentional
]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
source = ["src/ai_db"]
branch = true

[tool.black]
line-length = 100
target-version = ['py313']

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"