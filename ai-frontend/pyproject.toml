[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-frontend"
version = "0.1.0"
description = "AI-managed React frontend generation for AI-DB"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "AI-DB Team", email = "team@ai-db.dev"}
]
keywords = ["ai", "frontend", "react", "code-generation", "database"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0",
    "pyyaml>=6.0",
    "aiofiles>=23.0",
    "jsonschema>=4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "mypy>=1.0",
    "black>=23.0",
    "ruff>=0.0.280",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_frontend*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.ruff]
select = ["E", "F", "I", "N", "UP", "S", "B", "A", "C", "DTZ", "T", "W", "ARG", "RUF"]
ignore = ["S101", "S603", "S607"]  # Allow assert and subprocess for our use case
line-length = 88
target-version = "py310"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]